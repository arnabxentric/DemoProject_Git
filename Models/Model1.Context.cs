//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Data.Objects;

namespace XenERP.Models
{
    public partial class InventoryEntities : DbContext
    {
        public InventoryEntities()
            : base("name=InventoryEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Bank> Banks { get; set; }
        public DbSet<Basictable> Basictables { get; set; }
        public DbSet<BillWisePayment> BillWisePayments { get; set; }
        public DbSet<BillWiseReceive> BillWiseReceives { get; set; }
        public DbSet<BranchMaster> BranchMasters { get; set; }
        public DbSet<BusinessPartner> BusinessPartners { get; set; }
        public DbSet<CashTransfer> CashTransfers { get; set; }
        public DbSet<Category> Categories { get; set; }
        public DbSet<CategoryUSA> CategoryUSAs { get; set; }
        public DbSet<CheckDescriptoinMaster> CheckDescriptoinMasters { get; set; }
        public DbSet<CheckMaster> CheckMasters { get; set; }
        public DbSet<ChickIssuedMaster> ChickIssuedMasters { get; set; }
        public DbSet<ChickReceivedMaster> ChickReceivedMasters { get; set; }
        public DbSet<ChickRequestHOMaster> ChickRequestHOMasters { get; set; }
        public DbSet<Company> Companies { get; set; }
        public DbSet<CompanyHead> CompanyHeads { get; set; }
        public DbSet<CompanySetupGuide> CompanySetupGuides { get; set; }
        public DbSet<Composition> Compositions { get; set; }
        public DbSet<Contra> Contras { get; set; }
        public DbSet<Costing> Costings { get; set; }
        public DbSet<Country> Countries { get; set; }
        public DbSet<CountryCode> CountryCodes { get; set; }
        public DbSet<Currency> Currencies { get; set; }
        public DbSet<CurrencyRate> CurrencyRates { get; set; }
        public DbSet<Customer> Customers { get; set; }
        public DbSet<Customerr> Customerrs { get; set; }
        public DbSet<CustomerType> CustomerTypes { get; set; }
        public DbSet<DailyAttendance> DailyAttendances { get; set; }
        public DbSet<DailyCheck> DailyChecks { get; set; }
        public DbSet<DateCultureFormat> DateCultureFormats { get; set; }
        public DbSet<DateCultureFormat1> DateCultureFormat1 { get; set; }
        public DbSet<DEBankDetail> DEBankDetails { get; set; }
        public DbSet<DeliveryMethod> DeliveryMethods { get; set; }
        public DbSet<Department> Departments { get; set; }
        public DbSet<Designation> Designations { get; set; }
        public DbSet<DEVoucher> DEVouchers { get; set; }
        public DbSet<DEVoucherDetail> DEVoucherDetails { get; set; }
        public DbSet<DiseasesMaster> DiseasesMasters { get; set; }
        public DbSet<Document> Documents { get; set; }
        public DbSet<DriverMaster> DriverMasters { get; set; }
        public DbSet<DummyOpeningBalance> DummyOpeningBalances { get; set; }
        public DbSet<Egg_Candling_Hiss> Egg_Candling_Hiss { get; set; }
        public DbSet<Egg_HatcherySales_Hiss> Egg_HatcherySales_Hiss { get; set; }
        public DbSet<Egg_Setting_Hiss> Egg_Setting_Hiss { get; set; }
        public DbSet<EggFarm_Flock_Hiss> EggFarm_Flock_Hiss { get; set; }
        public DbSet<EggFarm_MSTR_Hiss> EggFarm_MSTR_Hiss { get; set; }
        public DbSet<EMP> EMPs { get; set; }
        public DbSet<Emp_Department> Emp_Department { get; set; }
        public DbSet<EmpDeactivation> EmpDeactivations { get; set; }
        public DbSet<EmpDocument> EmpDocuments { get; set; }
        public DbSet<Employee> Employees { get; set; }
        public DbSet<Employee_details> Employee_details { get; set; }
        public DbSet<Employeecursor> Employeecursors { get; set; }
        public DbSet<EmployeeHierarchy> EmployeeHierarchies { get; set; }
        public DbSet<EmployeeLeave> EmployeeLeaves { get; set; }
        public DbSet<EmployeeResignation> EmployeeResignations { get; set; }
        public DbSet<EmployeeType> EmployeeTypes { get; set; }
        public DbSet<EmpSalaryRange> EmpSalaryRanges { get; set; }
        public DbSet<ExpensesHeadMaster> ExpensesHeadMasters { get; set; }
        public DbSet<FarmDailyEntry> FarmDailyEntries { get; set; }
        public DbSet<FarmDailyEntryDetail> FarmDailyEntryDetails { get; set; }
        public DbSet<FarmerReport> FarmerReports { get; set; }
        public DbSet<FarmerReportFeedDetail> FarmerReportFeedDetails { get; set; }
        public DbSet<FarmerReportSalesDetail> FarmerReportSalesDetails { get; set; }
        public DbSet<FarmMaster> FarmMasters { get; set; }
        public DbSet<FeedDailyEntryDetail> FeedDailyEntryDetails { get; set; }
        public DbSet<FeedIssueDetail> FeedIssueDetails { get; set; }
        public DbSet<FeedIssuedFromUnitDetail> FeedIssuedFromUnitDetails { get; set; }
        public DbSet<FeedIssuedFromUnitMaster> FeedIssuedFromUnitMasters { get; set; }
        public DbSet<FeedIssuedMaster> FeedIssuedMasters { get; set; }
        public DbSet<FeedIssueHO_Master> FeedIssueHO_Master { get; set; }
        public DbSet<FeedMaster> FeedMasters { get; set; }
        public DbSet<FeedReceivedDetail> FeedReceivedDetails { get; set; }
        public DbSet<FeedReceivedFromFarmMaster> FeedReceivedFromFarmMasters { get; set; }
        public DbSet<FeedReceivedMaster> FeedReceivedMasters { get; set; }
        public DbSet<FeedRecivedFromFarmDetail> FeedRecivedFromFarmDetails { get; set; }
        public DbSet<FeedReturnedFromFarmDetail> FeedReturnedFromFarmDetails { get; set; }
        public DbSet<FeedReturnedMaster> FeedReturnedMasters { get; set; }
        public DbSet<FinancialYearMaster> FinancialYearMasters { get; set; }
        public DbSet<FlockMaster> FlockMasters { get; set; }
        public DbSet<FlockReceivedInFarmMaster> FlockReceivedInFarmMasters { get; set; }
        public DbSet<FurtherDiscount> FurtherDiscounts { get; set; }
        public DbSet<GeneralHoliday> GeneralHolidays { get; set; }
        public DbSet<Grade> Grades { get; set; }
        public DbSet<Group> Groups { get; set; }
        public DbSet<GroupMaster> GroupMasters { get; set; }
        public DbSet<GroupType> GroupTypes { get; set; }
        public DbSet<Hatchery_MSTR_Hiss> Hatchery_MSTR_Hiss { get; set; }
        public DbSet<ImageofChick> ImageofChicks { get; set; }
        public DbSet<IngredientsFormula> IngredientsFormulas { get; set; }
        public DbSet<Issue> Issues { get; set; }
        public DbSet<IssueDetail> IssueDetails { get; set; }
        public DbSet<ItemAdjustment> ItemAdjustments { get; set; }
        public DbSet<Journal> Journals { get; set; }
        public DbSet<JournalDetail> JournalDetails { get; set; }
        public DbSet<Leave> Leaves { get; set; }
        public DbSet<LedgerMaster> LedgerMasters { get; set; }
        public DbSet<MedicineDetail> MedicineDetails { get; set; }
        public DbSet<MedicineIssuedMaster> MedicineIssuedMasters { get; set; }
        public DbSet<MedicineIssueHoMaster> MedicineIssueHoMasters { get; set; }
        public DbSet<MedicineReceivedMaster> MedicineReceivedMasters { get; set; }
        public DbSet<MedicineRequestMaster> MedicineRequestMasters { get; set; }
        public DbSet<MedicineReturnedMaster> MedicineReturnedMasters { get; set; }
        public DbSet<MenuaccessUser> MenuaccessUsers { get; set; }
        public DbSet<MenuHeaderMaster> MenuHeaderMasters { get; set; }
        public DbSet<MenuMaster> MenuMasters { get; set; }
        public DbSet<monthlyAttendance> monthlyAttendances { get; set; }
        public DbSet<Nutrition> Nutritions { get; set; }
        public DbSet<OpBalancePaymentDetail> OpBalancePaymentDetails { get; set; }
        public DbSet<OpeningBalance> OpeningBalances { get; set; }
        public DbSet<OpeningBalancePayment> OpeningBalancePayments { get; set; }
        public DbSet<OverTime> OverTimes { get; set; }
        public DbSet<PaymentTerm> PaymentTerms { get; set; }
        public DbSet<Payroll> Payrolls { get; set; }
        public DbSet<PayrollDetail> PayrollDetails { get; set; }
        public DbSet<Plant> Plants { get; set; }
        public DbSet<PORequest> PORequests { get; set; }
        public DbSet<PORequestDetail> PORequestDetails { get; set; }
        public DbSet<PoultryDailyEntry> PoultryDailyEntries { get; set; }
        public DbSet<PoultryDailyEntryFeedDetail> PoultryDailyEntryFeedDetails { get; set; }
        public DbSet<Prefix> Prefixes { get; set; }
        public DbSet<PriceList> PriceLists { get; set; }
        public DbSet<PriceList_Log> PriceList_Log { get; set; }
        public DbSet<Product> Products { get; set; }
        public DbSet<ProductCategory_MSTR> ProductCategory_MSTR { get; set; }
        public DbSet<ProductCompany> ProductCompanies { get; set; }
        public DbSet<ProductComposition> ProductCompositions { get; set; }
        public DbSet<Production> Productions { get; set; }
        public DbSet<ProductionDetail> ProductionDetails { get; set; }
        public DbSet<ProductOpening> ProductOpenings { get; set; }
        public DbSet<PurchaseCost> PurchaseCosts { get; set; }
        public DbSet<PurchaseCostingDetail> PurchaseCostingDetails { get; set; }
        public DbSet<PurchaseInvoice> PurchaseInvoices { get; set; }
        public DbSet<PurchaseInvoiceDetail> PurchaseInvoiceDetails { get; set; }
        public DbSet<PurchaseOrder> PurchaseOrders { get; set; }
        public DbSet<PurchaseOrderDetail> PurchaseOrderDetails { get; set; }
        public DbSet<PurchaseReceipt> PurchaseReceipts { get; set; }
        public DbSet<PurchaseReceiptDetail> PurchaseReceiptDetails { get; set; }
        public DbSet<PurchaseRequest> PurchaseRequests { get; set; }
        public DbSet<PurchaseRequestDetail> PurchaseRequestDetails { get; set; }
        public DbSet<PurchaseReturn> PurchaseReturns { get; set; }
        public DbSet<PurchaseReturnDetail> PurchaseReturnDetails { get; set; }
        public DbSet<PurchaseReturnTax> PurchaseReturnTaxes { get; set; }
        public DbSet<PurchaseTax> PurchaseTaxes { get; set; }
        public DbSet<ReceiptPayment> ReceiptPayments { get; set; }
        public DbSet<Received_Egg_Hiss> Received_Egg_Hiss { get; set; }
        public DbSet<Reconcilation> Reconcilations { get; set; }
        public DbSet<Role> Roles { get; set; }
        public DbSet<Route> Routes { get; set; }
        public DbSet<SalaryComponent> SalaryComponents { get; set; }
        public DbSet<SalesCostingDetail> SalesCostingDetails { get; set; }
        public DbSet<SalesDelivery> SalesDeliveries { get; set; }
        public DbSet<SalesDeliveryDetail> SalesDeliveryDetails { get; set; }
        public DbSet<SalesGroup> SalesGroups { get; set; }
        public DbSet<SalesInvoice> SalesInvoices { get; set; }
        public DbSet<SalesInvoiceDetail> SalesInvoiceDetails { get; set; }
        public DbSet<SalesOrder> SalesOrders { get; set; }
        public DbSet<SalesOrderDetail> SalesOrderDetails { get; set; }
        public DbSet<SalesPerformaCostingDetail> SalesPerformaCostingDetails { get; set; }
        public DbSet<SalesPerformaInvoice> SalesPerformaInvoices { get; set; }
        public DbSet<SalesPerformaInvoiceDetail> SalesPerformaInvoiceDetails { get; set; }
        public DbSet<SalesPerson> SalesPersons { get; set; }
        public DbSet<SalesQuote> SalesQuotes { get; set; }
        public DbSet<SalesQuoteDetail> SalesQuoteDetails { get; set; }
        public DbSet<SalesReturn> SalesReturns { get; set; }
        public DbSet<SalesReturnDetail> SalesReturnDetails { get; set; }
        public DbSet<SalesReturnTax> SalesReturnTaxes { get; set; }
        public DbSet<SalesTax> SalesTaxes { get; set; }
        public DbSet<salesusa> salesusas { get; set; }
        public DbSet<SectionMaster> SectionMasters { get; set; }
        public DbSet<SetSalary> SetSalaries { get; set; }
        public DbSet<SetSalaryDetail> SetSalaryDetails { get; set; }
        public DbSet<ShedMaster> ShedMasters { get; set; }
        public DbSet<Shift> Shifts { get; set; }
        public DbSet<ShippingCompany> ShippingCompanies { get; set; }
        public DbSet<SpplierAccount> SpplierAccounts { get; set; }
        public DbSet<State> States { get; set; }
        public DbSet<Stock> Stocks { get; set; }
        public DbSet<StockData> StockDatas { get; set; }
        public DbSet<Supplier> Suppliers { get; set; }
        public DbSet<SupplierProductPrice> SupplierProductPrices { get; set; }
        public DbSet<Tax> Taxes { get; set; }
        public DbSet<Taxrate> Taxrates { get; set; }
        public DbSet<Test> Tests { get; set; }
        public DbSet<TransactionUSA> TransactionUSAs { get; set; }
        public DbSet<TransactionUSADetail> TransactionUSADetails { get; set; }
        public DbSet<TransferDeliveryReceive> TransferDeliveryReceives { get; set; }
        public DbSet<TransferDeliveryReceiveDetail> TransferDeliveryReceiveDetails { get; set; }
        public DbSet<UnitContractRateMaster> UnitContractRateMasters { get; set; }
        public DbSet<UnitDailyEntry> UnitDailyEntries { get; set; }
        public DbSet<UnitDailyEntryDetail> UnitDailyEntryDetails { get; set; }
        public DbSet<UnitMaster> UnitMasters { get; set; }
        public DbSet<Unit> Units { get; set; }
        public DbSet<UOM> UOMs { get; set; }
        public DbSet<UploadImageMaster> UploadImageMasters { get; set; }
        public DbSet<User> Users { get; set; }
        public DbSet<VoucherPolitry> VoucherPolitries { get; set; }
        public DbSet<Warehouse> Warehouses { get; set; }
        public DbSet<WarehouseHead> WarehouseHeads { get; set; }
        public DbSet<WarehouseTransfer> WarehouseTransfers { get; set; }
        public DbSet<WarehouseTransferDetail> WarehouseTransferDetails { get; set; }
        public DbSet<webpages_Membership> webpages_Membership { get; set; }
        public DbSet<webpages_OAuthMembership> webpages_OAuthMembership { get; set; }
        public DbSet<webpages_Roles> webpages_Roles { get; set; }
        public DbSet<webpages_UsersInRoles> webpages_UsersInRoles { get; set; }
        public DbSet<WeeklyHoliday> WeeklyHolidays { get; set; }
        public DbSet<SalesMaster> SalesMasters { get; set; }
        public DbSet<StockCount> StockCounts { get; set; }
        public DbSet<VaccineMaster> VaccineMasters { get; set; }
        public DbSet<BRSALLBankBookView> BRSALLBankBookViews { get; set; }
        public DbSet<BRSView> BRSViews { get; set; }
        public DbSet<ReceivePaymentDisplayView> ReceivePaymentDisplayViews { get; set; }
    
        public virtual ObjectResult<AccountsBook_BalanceSheet_Result> AccountsBook_BalanceSheet(Nullable<int> companyid, Nullable<int> branchId, Nullable<int> fYearId)
        {
            ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace.LoadFromAssembly(typeof(AccountsBook_BalanceSheet_Result).Assembly);
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var fYearIdParameter = fYearId.HasValue ?
                new ObjectParameter("fYearId", fYearId) :
                new ObjectParameter("fYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccountsBook_BalanceSheet_Result>("AccountsBook_BalanceSheet", companyidParameter, branchIdParameter, fYearIdParameter);
        }
    
        public virtual ObjectResult<AccountsBook_BRS_Result> AccountsBook_BRS(Nullable<int> bankLedgerId, Nullable<int> companyid, Nullable<int> branchId, Nullable<int> fYearId)
        {
            ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace.LoadFromAssembly(typeof(AccountsBook_BRS_Result).Assembly);
    
            var bankLedgerIdParameter = bankLedgerId.HasValue ?
                new ObjectParameter("BankLedgerId", bankLedgerId) :
                new ObjectParameter("BankLedgerId", typeof(int));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var fYearIdParameter = fYearId.HasValue ?
                new ObjectParameter("fYearId", fYearId) :
                new ObjectParameter("fYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccountsBook_BRS_Result>("AccountsBook_BRS", bankLedgerIdParameter, companyidParameter, branchIdParameter, fYearIdParameter);
        }
    
        public virtual ObjectResult<AccountsBook_CashBook_Result> AccountsBook_CashBook(Nullable<int> companyid, Nullable<int> branchId, Nullable<int> fYearId)
        {
            ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace.LoadFromAssembly(typeof(AccountsBook_CashBook_Result).Assembly);
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var fYearIdParameter = fYearId.HasValue ?
                new ObjectParameter("fYearId", fYearId) :
                new ObjectParameter("fYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccountsBook_CashBook_Result>("AccountsBook_CashBook", companyidParameter, branchIdParameter, fYearIdParameter);
        }
    
        public virtual ObjectResult<AccountsBook_ChartOfAccounts_Result> AccountsBook_ChartOfAccounts(Nullable<int> companyid, Nullable<int> branchId, Nullable<int> fYearId)
        {
            ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace.LoadFromAssembly(typeof(AccountsBook_ChartOfAccounts_Result).Assembly);
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var fYearIdParameter = fYearId.HasValue ?
                new ObjectParameter("fYearId", fYearId) :
                new ObjectParameter("fYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccountsBook_ChartOfAccounts_Result>("AccountsBook_ChartOfAccounts", companyidParameter, branchIdParameter, fYearIdParameter);
        }
    
        public virtual ObjectResult<AccountsBook_DayBook_Result> AccountsBook_DayBook(Nullable<int> companyid, Nullable<int> branchId, Nullable<int> fYearId, Nullable<System.DateTime> currentDate)
        {
            ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace.LoadFromAssembly(typeof(AccountsBook_DayBook_Result).Assembly);
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var fYearIdParameter = fYearId.HasValue ?
                new ObjectParameter("fYearId", fYearId) :
                new ObjectParameter("fYearId", typeof(int));
    
            var currentDateParameter = currentDate.HasValue ?
                new ObjectParameter("CurrentDate", currentDate) :
                new ObjectParameter("CurrentDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccountsBook_DayBook_Result>("AccountsBook_DayBook", companyidParameter, branchIdParameter, fYearIdParameter, currentDateParameter);
        }
    
        public virtual int AccountsBook_GroupLedgerAmount(Nullable<int> cGid, Nullable<int> companyid, Nullable<int> branchId, Nullable<int> fYearId)
        {
            var cGidParameter = cGid.HasValue ?
                new ObjectParameter("cGid", cGid) :
                new ObjectParameter("cGid", typeof(int));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var fYearIdParameter = fYearId.HasValue ?
                new ObjectParameter("fYearId", fYearId) :
                new ObjectParameter("fYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AccountsBook_GroupLedgerAmount", cGidParameter, companyidParameter, branchIdParameter, fYearIdParameter);
        }
    
        public virtual ObjectResult<AccountsBook_GroupWise_Admin_TrialBalance_Current_Result> AccountsBook_GroupWise_Admin_TrialBalance_Current(Nullable<int> companyid, Nullable<int> fYearId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace.LoadFromAssembly(typeof(AccountsBook_GroupWise_Admin_TrialBalance_Current_Result).Assembly);
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var fYearIdParameter = fYearId.HasValue ?
                new ObjectParameter("fYearId", fYearId) :
                new ObjectParameter("fYearId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccountsBook_GroupWise_Admin_TrialBalance_Current_Result>("AccountsBook_GroupWise_Admin_TrialBalance_Current", companyidParameter, fYearIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<AccountsBook_GroupWise_BS_Current_Result> AccountsBook_GroupWise_BS_Current(Nullable<int> companyid, Nullable<int> branchId, Nullable<int> fYearId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace.LoadFromAssembly(typeof(AccountsBook_GroupWise_BS_Current_Result).Assembly);
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var fYearIdParameter = fYearId.HasValue ?
                new ObjectParameter("fYearId", fYearId) :
                new ObjectParameter("fYearId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccountsBook_GroupWise_BS_Current_Result>("AccountsBook_GroupWise_BS_Current", companyidParameter, branchIdParameter, fYearIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<AccountsBook_GroupWise_DateRange_Result> AccountsBook_GroupWise_DateRange(Nullable<int> companyid, Nullable<int> branchId, Nullable<int> fYearId, Nullable<int> groupId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace.LoadFromAssembly(typeof(AccountsBook_GroupWise_DateRange_Result).Assembly);
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var fYearIdParameter = fYearId.HasValue ?
                new ObjectParameter("fYearId", fYearId) :
                new ObjectParameter("fYearId", typeof(int));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccountsBook_GroupWise_DateRange_Result>("AccountsBook_GroupWise_DateRange", companyidParameter, branchIdParameter, fYearIdParameter, groupIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<AccountsBook_GroupWise_DateRange_Current_Result> AccountsBook_GroupWise_DateRange_Current(Nullable<int> companyid, Nullable<int> fYearId, Nullable<int> groupId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace.LoadFromAssembly(typeof(AccountsBook_GroupWise_DateRange_Current_Result).Assembly);
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var fYearIdParameter = fYearId.HasValue ?
                new ObjectParameter("fYearId", fYearId) :
                new ObjectParameter("fYearId", typeof(int));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccountsBook_GroupWise_DateRange_Current_Result>("AccountsBook_GroupWise_DateRange_Current", companyidParameter, fYearIdParameter, groupIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<AccountsBook_GroupWise_DateRange_Current_AllGroupAdmin_Result> AccountsBook_GroupWise_DateRange_Current_AllGroupAdmin(Nullable<int> companyid, Nullable<int> fYearId, Nullable<int> groupId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace.LoadFromAssembly(typeof(AccountsBook_GroupWise_DateRange_Current_AllGroupAdmin_Result).Assembly);
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var fYearIdParameter = fYearId.HasValue ?
                new ObjectParameter("fYearId", fYearId) :
                new ObjectParameter("fYearId", typeof(int));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccountsBook_GroupWise_DateRange_Current_AllGroupAdmin_Result>("AccountsBook_GroupWise_DateRange_Current_AllGroupAdmin", companyidParameter, fYearIdParameter, groupIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<AccountsBook_GroupWise_DateRange_Current_AllGroupAdmin1_Result> AccountsBook_GroupWise_DateRange_Current_AllGroupAdmin1(Nullable<int> companyid, Nullable<int> fYearId, Nullable<int> groupId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace.LoadFromAssembly(typeof(AccountsBook_GroupWise_DateRange_Current_AllGroupAdmin1_Result).Assembly);
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var fYearIdParameter = fYearId.HasValue ?
                new ObjectParameter("fYearId", fYearId) :
                new ObjectParameter("fYearId", typeof(int));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccountsBook_GroupWise_DateRange_Current_AllGroupAdmin1_Result>("AccountsBook_GroupWise_DateRange_Current_AllGroupAdmin1", companyidParameter, fYearIdParameter, groupIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<AccountsBook_GroupWise_DateRange1_Result> AccountsBook_GroupWise_DateRange1(Nullable<int> companyid, Nullable<int> branchId, Nullable<int> fYearId, Nullable<int> groupId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace.LoadFromAssembly(typeof(AccountsBook_GroupWise_DateRange1_Result).Assembly);
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var fYearIdParameter = fYearId.HasValue ?
                new ObjectParameter("fYearId", fYearId) :
                new ObjectParameter("fYearId", typeof(int));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccountsBook_GroupWise_DateRange1_Result>("AccountsBook_GroupWise_DateRange1", companyidParameter, branchIdParameter, fYearIdParameter, groupIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<AccountsBook_GroupWise_DateRangeSK_Result> AccountsBook_GroupWise_DateRangeSK(Nullable<int> companyid, Nullable<int> branchId, Nullable<int> fYearId, Nullable<int> groupId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace.LoadFromAssembly(typeof(AccountsBook_GroupWise_DateRangeSK_Result).Assembly);
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var fYearIdParameter = fYearId.HasValue ?
                new ObjectParameter("fYearId", fYearId) :
                new ObjectParameter("fYearId", typeof(int));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccountsBook_GroupWise_DateRangeSK_Result>("AccountsBook_GroupWise_DateRangeSK", companyidParameter, branchIdParameter, fYearIdParameter, groupIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<AccountsBook_GroupWise_PL_Current_Result> AccountsBook_GroupWise_PL_Current(Nullable<int> companyid, Nullable<int> branchId, Nullable<int> fYearId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace.LoadFromAssembly(typeof(AccountsBook_GroupWise_PL_Current_Result).Assembly);
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var fYearIdParameter = fYearId.HasValue ?
                new ObjectParameter("fYearId", fYearId) :
                new ObjectParameter("fYearId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccountsBook_GroupWise_PL_Current_Result>("AccountsBook_GroupWise_PL_Current", companyidParameter, branchIdParameter, fYearIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<AccountsBook_GroupWise_TrialBalance_Current_Result> AccountsBook_GroupWise_TrialBalance_Current(Nullable<int> companyid, Nullable<int> branchId, Nullable<int> fYearId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace.LoadFromAssembly(typeof(AccountsBook_GroupWise_TrialBalance_Current_Result).Assembly);
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var fYearIdParameter = fYearId.HasValue ?
                new ObjectParameter("fYearId", fYearId) :
                new ObjectParameter("fYearId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccountsBook_GroupWise_TrialBalance_Current_Result>("AccountsBook_GroupWise_TrialBalance_Current", companyidParameter, branchIdParameter, fYearIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<AccountsBook_LedgerWise_Result> AccountsBook_LedgerWise(Nullable<int> companyid, Nullable<int> branchId, Nullable<int> fYearId, Nullable<int> ledgerId)
        {
            ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace.LoadFromAssembly(typeof(AccountsBook_LedgerWise_Result).Assembly);
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var fYearIdParameter = fYearId.HasValue ?
                new ObjectParameter("fYearId", fYearId) :
                new ObjectParameter("fYearId", typeof(int));
    
            var ledgerIdParameter = ledgerId.HasValue ?
                new ObjectParameter("LedgerId", ledgerId) :
                new ObjectParameter("LedgerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccountsBook_LedgerWise_Result>("AccountsBook_LedgerWise", companyidParameter, branchIdParameter, fYearIdParameter, ledgerIdParameter);
        }
    
        public virtual ObjectResult<AccountsBook_LedgerWise_DateRange_Result> AccountsBook_LedgerWise_DateRange(Nullable<int> companyid, Nullable<int> branchId, Nullable<int> fYearId, Nullable<int> ledgerId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace.LoadFromAssembly(typeof(AccountsBook_LedgerWise_DateRange_Result).Assembly);
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var fYearIdParameter = fYearId.HasValue ?
                new ObjectParameter("fYearId", fYearId) :
                new ObjectParameter("fYearId", typeof(int));
    
            var ledgerIdParameter = ledgerId.HasValue ?
                new ObjectParameter("LedgerId", ledgerId) :
                new ObjectParameter("LedgerId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccountsBook_LedgerWise_DateRange_Result>("AccountsBook_LedgerWise_DateRange", companyidParameter, branchIdParameter, fYearIdParameter, ledgerIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<AccountsBook_LedgerWise_DateRange_Hari_Admin_Result> AccountsBook_LedgerWise_DateRange_Hari_Admin(Nullable<int> companyid, Nullable<int> fYearId, Nullable<int> ledgerId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace.LoadFromAssembly(typeof(AccountsBook_LedgerWise_DateRange_Hari_Admin_Result).Assembly);
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var fYearIdParameter = fYearId.HasValue ?
                new ObjectParameter("fYearId", fYearId) :
                new ObjectParameter("fYearId", typeof(int));
    
            var ledgerIdParameter = ledgerId.HasValue ?
                new ObjectParameter("LedgerId", ledgerId) :
                new ObjectParameter("LedgerId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccountsBook_LedgerWise_DateRange_Hari_Admin_Result>("AccountsBook_LedgerWise_DateRange_Hari_Admin", companyidParameter, fYearIdParameter, ledgerIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual int AccountsBook_LedgerWise_OpeningBalance_DateRange(Nullable<int> companyid, Nullable<int> fYearId, Nullable<int> newfYearId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> userId)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var fYearIdParameter = fYearId.HasValue ?
                new ObjectParameter("fYearId", fYearId) :
                new ObjectParameter("fYearId", typeof(int));
    
            var newfYearIdParameter = newfYearId.HasValue ?
                new ObjectParameter("NewfYearId", newfYearId) :
                new ObjectParameter("NewfYearId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AccountsBook_LedgerWise_OpeningBalance_DateRange", companyidParameter, fYearIdParameter, newfYearIdParameter, fromDateParameter, toDateParameter, userIdParameter);
        }
    
        public virtual int AccountsBook_LedgerWise_OpeningBalance_DateRange_Backup(Nullable<int> companyid, Nullable<int> fYearId, Nullable<int> newfYearId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> userId)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var fYearIdParameter = fYearId.HasValue ?
                new ObjectParameter("fYearId", fYearId) :
                new ObjectParameter("fYearId", typeof(int));
    
            var newfYearIdParameter = newfYearId.HasValue ?
                new ObjectParameter("NewfYearId", newfYearId) :
                new ObjectParameter("NewfYearId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AccountsBook_LedgerWise_OpeningBalance_DateRange_Backup", companyidParameter, fYearIdParameter, newfYearIdParameter, fromDateParameter, toDateParameter, userIdParameter);
        }
    
        public virtual ObjectResult<AccountsBook_ProfitAndLoss_Result> AccountsBook_ProfitAndLoss(Nullable<int> companyid, Nullable<int> branchId, Nullable<int> fYearId)
        {
            ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace.LoadFromAssembly(typeof(AccountsBook_ProfitAndLoss_Result).Assembly);
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var fYearIdParameter = fYearId.HasValue ?
                new ObjectParameter("fYearId", fYearId) :
                new ObjectParameter("fYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccountsBook_ProfitAndLoss_Result>("AccountsBook_ProfitAndLoss", companyidParameter, branchIdParameter, fYearIdParameter);
        }
    
        public virtual int AccountsBook_ProfitAndLossForBS(Nullable<int> companyid, Nullable<int> branchId, Nullable<int> fYearId, ObjectParameter profitAmount)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var fYearIdParameter = fYearId.HasValue ?
                new ObjectParameter("fYearId", fYearId) :
                new ObjectParameter("fYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AccountsBook_ProfitAndLossForBS", companyidParameter, branchIdParameter, fYearIdParameter, profitAmount);
        }
    
        public virtual int COGS(Nullable<long> companyId, Nullable<long> userId, Nullable<long> branchId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("COGS", companyIdParameter, userIdParameter, branchIdParameter);
        }
    
        public virtual ObjectResult<CustomerDebitCredit_Result> CustomerDebitCredit(Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace.LoadFromAssembly(typeof(CustomerDebitCredit_Result).Assembly);
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerDebitCredit_Result>("CustomerDebitCredit", fromParameter, toParameter);
        }
    
        public virtual ObjectResult<CustomerInvoice_Result> CustomerInvoice(Nullable<int> customerId)
        {
            ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace.LoadFromAssembly(typeof(CustomerInvoice_Result).Assembly);
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerInvoice_Result>("CustomerInvoice", customerIdParameter);
        }
    
        public virtual ObjectResult<Get_BankBook_Result> Get_BankBook(Nullable<int> companyID, Nullable<int> branchID, Nullable<int> fYearID, Nullable<int> bankLedgerId)
        {
            ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace.LoadFromAssembly(typeof(Get_BankBook_Result).Assembly);
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var fYearIDParameter = fYearID.HasValue ?
                new ObjectParameter("FYearID", fYearID) :
                new ObjectParameter("FYearID", typeof(int));
    
            var bankLedgerIdParameter = bankLedgerId.HasValue ?
                new ObjectParameter("BankLedgerId", bankLedgerId) :
                new ObjectParameter("BankLedgerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_BankBook_Result>("Get_BankBook", companyIDParameter, branchIDParameter, fYearIDParameter, bankLedgerIdParameter);
        }
    
        public virtual ObjectResult<Get_CashBook_Result> Get_CashBook(Nullable<int> companyID, Nullable<int> branchID, Nullable<int> fYearID)
        {
            ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace.LoadFromAssembly(typeof(Get_CashBook_Result).Assembly);
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var fYearIDParameter = fYearID.HasValue ?
                new ObjectParameter("FYearID", fYearID) :
                new ObjectParameter("FYearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_CashBook_Result>("Get_CashBook", companyIDParameter, branchIDParameter, fYearIDParameter);
        }
    
        public virtual ObjectResult<IncomeReport_Result> IncomeReport(Nullable<int> companyId, Nullable<int> branchId, Nullable<int> salesInvId)
        {
            ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace.LoadFromAssembly(typeof(IncomeReport_Result).Assembly);
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var salesInvIdParameter = salesInvId.HasValue ?
                new ObjectParameter("SalesInvId", salesInvId) :
                new ObjectParameter("SalesInvId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<IncomeReport_Result>("IncomeReport", companyIdParameter, branchIdParameter, salesInvIdParameter);
        }
    
        public virtual ObjectResult<IncomeReport_CustomerWise_Result> IncomeReport_CustomerWise(Nullable<int> companyId, Nullable<int> branchId, Nullable<int> custId)
        {
            ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace.LoadFromAssembly(typeof(IncomeReport_CustomerWise_Result).Assembly);
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var custIdParameter = custId.HasValue ?
                new ObjectParameter("CustId", custId) :
                new ObjectParameter("CustId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<IncomeReport_CustomerWise_Result>("IncomeReport_CustomerWise", companyIdParameter, branchIdParameter, custIdParameter);
        }
    
        public virtual ObjectResult<string> Insertgroupmaster(string gid, string gName, string gType, Nullable<int> gTypeId, Nullable<int> parentGroupId, string sortorder, Nullable<int> fID, Nullable<long> companyId, Nullable<long> userId, Nullable<long> branchId)
        {
            var gidParameter = gid != null ?
                new ObjectParameter("gid", gid) :
                new ObjectParameter("gid", typeof(string));
    
            var gNameParameter = gName != null ?
                new ObjectParameter("gName", gName) :
                new ObjectParameter("gName", typeof(string));
    
            var gTypeParameter = gType != null ?
                new ObjectParameter("gType", gType) :
                new ObjectParameter("gType", typeof(string));
    
            var gTypeIdParameter = gTypeId.HasValue ?
                new ObjectParameter("gTypeId", gTypeId) :
                new ObjectParameter("gTypeId", typeof(int));
    
            var parentGroupIdParameter = parentGroupId.HasValue ?
                new ObjectParameter("ParentGroupId", parentGroupId) :
                new ObjectParameter("ParentGroupId", typeof(int));
    
            var sortorderParameter = sortorder != null ?
                new ObjectParameter("Sortorder", sortorder) :
                new ObjectParameter("Sortorder", typeof(string));
    
            var fIDParameter = fID.HasValue ?
                new ObjectParameter("fID", fID) :
                new ObjectParameter("fID", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Insertgroupmaster", gidParameter, gNameParameter, gTypeParameter, gTypeIdParameter, parentGroupIdParameter, sortorderParameter, fIDParameter, companyIdParameter, userIdParameter, branchIdParameter);
        }
    
        public virtual int InsertInotBranchMaster(Nullable<int> compId, Nullable<int> uId, Nullable<long> branchId, Nullable<int> fID)
        {
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(int));
    
            var uIdParameter = uId.HasValue ?
                new ObjectParameter("UId", uId) :
                new ObjectParameter("UId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(long));
    
            var fIDParameter = fID.HasValue ?
                new ObjectParameter("fID", fID) :
                new ObjectParameter("fID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertInotBranchMaster", compIdParameter, uIdParameter, branchIdParameter, fIDParameter);
        }
    
        public virtual int InsertInotBranchMaster1(Nullable<int> compId, Nullable<int> uId, Nullable<long> branchId, Nullable<int> fID)
        {
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(int));
    
            var uIdParameter = uId.HasValue ?
                new ObjectParameter("UId", uId) :
                new ObjectParameter("UId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(long));
    
            var fIDParameter = fID.HasValue ?
                new ObjectParameter("fID", fID) :
                new ObjectParameter("fID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertInotBranchMaster1", compIdParameter, uIdParameter, branchIdParameter, fIDParameter);
        }
    
        public virtual ObjectResult<string> InsertLedgerBank(Nullable<int> fyearId, Nullable<int> companyId, Nullable<long> branchId, Nullable<int> userId)
        {
            var fyearIdParameter = fyearId.HasValue ?
                new ObjectParameter("FyearId", fyearId) :
                new ObjectParameter("FyearId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("InsertLedgerBank", fyearIdParameter, companyIdParameter, branchIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertLedgermaster(string ledgerId, string lName, Nullable<int> gid, Nullable<decimal> oBal, string lType, Nullable<int> fID, Nullable<long> branchId, Nullable<long> companyId, Nullable<long> userId)
        {
            var ledgerIdParameter = ledgerId != null ?
                new ObjectParameter("LedgerId", ledgerId) :
                new ObjectParameter("LedgerId", typeof(string));
    
            var lNameParameter = lName != null ?
                new ObjectParameter("lName", lName) :
                new ObjectParameter("lName", typeof(string));
    
            var gidParameter = gid.HasValue ?
                new ObjectParameter("gid", gid) :
                new ObjectParameter("gid", typeof(int));
    
            var oBalParameter = oBal.HasValue ?
                new ObjectParameter("oBal", oBal) :
                new ObjectParameter("oBal", typeof(decimal));
    
            var lTypeParameter = lType != null ?
                new ObjectParameter("lType", lType) :
                new ObjectParameter("lType", typeof(string));
    
            var fIDParameter = fID.HasValue ?
                new ObjectParameter("fID", fID) :
                new ObjectParameter("fID", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(long));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertLedgermaster", ledgerIdParameter, lNameParameter, gidParameter, oBalParameter, lTypeParameter, fIDParameter, branchIdParameter, companyIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<string> InsertSubgroup(string gName, string gType, Nullable<int> grouptypeId, Nullable<int> parentgroupId, Nullable<int> fID, Nullable<long> companyId, Nullable<long> userId, Nullable<long> branchId)
        {
            var gNameParameter = gName != null ?
                new ObjectParameter("gName", gName) :
                new ObjectParameter("gName", typeof(string));
    
            var gTypeParameter = gType != null ?
                new ObjectParameter("gType", gType) :
                new ObjectParameter("gType", typeof(string));
    
            var grouptypeIdParameter = grouptypeId.HasValue ?
                new ObjectParameter("GrouptypeId", grouptypeId) :
                new ObjectParameter("GrouptypeId", typeof(int));
    
            var parentgroupIdParameter = parentgroupId.HasValue ?
                new ObjectParameter("ParentgroupId", parentgroupId) :
                new ObjectParameter("ParentgroupId", typeof(int));
    
            var fIDParameter = fID.HasValue ?
                new ObjectParameter("fID", fID) :
                new ObjectParameter("fID", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("InsertSubgroup", gNameParameter, gTypeParameter, grouptypeIdParameter, parentgroupIdParameter, fIDParameter, companyIdParameter, userIdParameter, branchIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertSubLedgermaster(string ledgerId, string lName, Nullable<int> gid, Nullable<long> parentID, Nullable<decimal> oBal, string lType, Nullable<int> fID, Nullable<long> branchId, Nullable<long> companyId, Nullable<long> userId)
        {
            var ledgerIdParameter = ledgerId != null ?
                new ObjectParameter("LedgerId", ledgerId) :
                new ObjectParameter("LedgerId", typeof(string));
    
            var lNameParameter = lName != null ?
                new ObjectParameter("lName", lName) :
                new ObjectParameter("lName", typeof(string));
    
            var gidParameter = gid.HasValue ?
                new ObjectParameter("gid", gid) :
                new ObjectParameter("gid", typeof(int));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("parentID", parentID) :
                new ObjectParameter("parentID", typeof(long));
    
            var oBalParameter = oBal.HasValue ?
                new ObjectParameter("oBal", oBal) :
                new ObjectParameter("oBal", typeof(decimal));
    
            var lTypeParameter = lType != null ?
                new ObjectParameter("lType", lType) :
                new ObjectParameter("lType", typeof(string));
    
            var fIDParameter = fID.HasValue ?
                new ObjectParameter("fID", fID) :
                new ObjectParameter("fID", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(long));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertSubLedgermaster", ledgerIdParameter, lNameParameter, gidParameter, parentIDParameter, oBalParameter, lTypeParameter, fIDParameter, branchIdParameter, companyIdParameter, userIdParameter);
        }
    
        public virtual int InventoryBook_ItemWiseStockDetails(Nullable<int> companyId, Nullable<int> branchCode, Nullable<int> fyearid, Nullable<int> itemId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchCodeParameter = branchCode.HasValue ?
                new ObjectParameter("BranchCode", branchCode) :
                new ObjectParameter("BranchCode", typeof(int));
    
            var fyearidParameter = fyearid.HasValue ?
                new ObjectParameter("Fyearid", fyearid) :
                new ObjectParameter("Fyearid", typeof(int));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InventoryBook_ItemWiseStockDetails", companyIdParameter, branchCodeParameter, fyearidParameter, itemIdParameter);
        }
    
        public virtual int InventoryBook_ItemWiseStockDetails_New(Nullable<int> companyId, Nullable<int> branchCode, Nullable<int> fyearid, Nullable<int> itemId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchCodeParameter = branchCode.HasValue ?
                new ObjectParameter("BranchCode", branchCode) :
                new ObjectParameter("BranchCode", typeof(int));
    
            var fyearidParameter = fyearid.HasValue ?
                new ObjectParameter("Fyearid", fyearid) :
                new ObjectParameter("Fyearid", typeof(int));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InventoryBook_ItemWiseStockDetails_New", companyIdParameter, branchCodeParameter, fyearidParameter, itemIdParameter);
        }
    
        public virtual ObjectResult<ProductGroup_Result> ProductGroup(Nullable<int> userId, Nullable<int> companyId)
        {
            ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace.LoadFromAssembly(typeof(ProductGroup_Result).Assembly);
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductGroup_Result>("ProductGroup", userIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<PurchasebyTax_Result> PurchasebyTax(Nullable<int> purchasetaxId, Nullable<System.DateTime> from, Nullable<System.DateTime> to, Nullable<int> companyId, Nullable<long> branchId)
        {
            ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace.LoadFromAssembly(typeof(PurchasebyTax_Result).Assembly);
    
            var purchasetaxIdParameter = purchasetaxId.HasValue ?
                new ObjectParameter("PurchasetaxId", purchasetaxId) :
                new ObjectParameter("PurchasetaxId", typeof(int));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PurchasebyTax_Result>("PurchasebyTax", purchasetaxIdParameter, fromParameter, toParameter, companyIdParameter, branchIdParameter);
        }
    
        public virtual int Recover_Truncated_Data_Proc(string database_Name, string schemaName_n_TableName, Nullable<System.DateTime> date_From, Nullable<System.DateTime> date_To)
        {
            var database_NameParameter = database_Name != null ?
                new ObjectParameter("Database_Name", database_Name) :
                new ObjectParameter("Database_Name", typeof(string));
    
            var schemaName_n_TableNameParameter = schemaName_n_TableName != null ?
                new ObjectParameter("SchemaName_n_TableName", schemaName_n_TableName) :
                new ObjectParameter("SchemaName_n_TableName", typeof(string));
    
            var date_FromParameter = date_From.HasValue ?
                new ObjectParameter("Date_From", date_From) :
                new ObjectParameter("Date_From", typeof(System.DateTime));
    
            var date_ToParameter = date_To.HasValue ?
                new ObjectParameter("Date_To", date_To) :
                new ObjectParameter("Date_To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Recover_Truncated_Data_Proc", database_NameParameter, schemaName_n_TableNameParameter, date_FromParameter, date_ToParameter);
        }
    
        public virtual ObjectResult<SaleTax_Result> SaleTax(Nullable<int> saletaxId, Nullable<System.DateTime> from, Nullable<System.DateTime> to, Nullable<int> companyId, Nullable<long> branchId)
        {
            ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace.LoadFromAssembly(typeof(SaleTax_Result).Assembly);
    
            var saletaxIdParameter = saletaxId.HasValue ?
                new ObjectParameter("SaletaxId", saletaxId) :
                new ObjectParameter("SaletaxId", typeof(int));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SaleTax_Result>("SaleTax", saletaxIdParameter, fromParameter, toParameter, companyIdParameter, branchIdParameter);
        }
    
        public virtual int Sp_GroupLedgerAmount()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_GroupLedgerAmount");
        }
    
        public virtual int Sp_GroupLedgerAmount_04122014(Nullable<int> cGid, Nullable<int> companyid, Nullable<int> branchId, Nullable<int> fYearId)
        {
            var cGidParameter = cGid.HasValue ?
                new ObjectParameter("cGid", cGid) :
                new ObjectParameter("cGid", typeof(int));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var fYearIdParameter = fYearId.HasValue ?
                new ObjectParameter("fYearId", fYearId) :
                new ObjectParameter("fYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_GroupLedgerAmount_04122014", cGidParameter, companyidParameter, branchIdParameter, fYearIdParameter);
        }
    
        public virtual int Sp_GroupLedgerAmount_1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_GroupLedgerAmount_1");
        }
    
        public virtual int Sp_GroupLedgerAmount_Final(Nullable<int> cGid)
        {
            var cGidParameter = cGid.HasValue ?
                new ObjectParameter("cGid", cGid) :
                new ObjectParameter("cGid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_GroupLedgerAmount_Final", cGidParameter);
        }
    
        public virtual ObjectResult<Sp_Show_Ledger_Details_Test_Result> Sp_Show_Ledger_Details_Test(Nullable<int> companyId, Nullable<int> branchId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> todate, Nullable<long> ledgerID, Nullable<int> fYearId)
        {
            ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace.LoadFromAssembly(typeof(Sp_Show_Ledger_Details_Test_Result).Assembly);
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var ledgerIDParameter = ledgerID.HasValue ?
                new ObjectParameter("LedgerID", ledgerID) :
                new ObjectParameter("LedgerID", typeof(long));
    
            var fYearIdParameter = fYearId.HasValue ?
                new ObjectParameter("fYearId", fYearId) :
                new ObjectParameter("fYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Show_Ledger_Details_Test_Result>("Sp_Show_Ledger_Details_Test", companyIdParameter, branchIdParameter, fromDateParameter, todateParameter, ledgerIDParameter, fYearIdParameter);
        }
    
        public virtual ObjectResult<Sp_TrialBalance_Result> Sp_TrialBalance(Nullable<int> companyid, Nullable<int> branchId, Nullable<int> fYearId)
        {
            ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace.LoadFromAssembly(typeof(Sp_TrialBalance_Result).Assembly);
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var fYearIdParameter = fYearId.HasValue ?
                new ObjectParameter("fYearId", fYearId) :
                new ObjectParameter("fYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_TrialBalance_Result>("Sp_TrialBalance", companyidParameter, branchIdParameter, fYearIdParameter);
        }
    
        public virtual ObjectResult<getTreeStructureForProduct_Result> getTreeStructureForProduct(Nullable<long> uplineID)
        {
            ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace.LoadFromAssembly(typeof(getTreeStructureForProduct_Result).Assembly);
    
            var uplineIDParameter = uplineID.HasValue ?
                new ObjectParameter("uplineID", uplineID) :
                new ObjectParameter("uplineID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getTreeStructureForProduct_Result>("getTreeStructureForProduct", uplineIDParameter);
        }
    
        public virtual ObjectResult<AccountsBook_LedgerWise_DateRange_AllLedgerAdmin_Backup_Result> AccountsBook_LedgerWise_DateRange_AllLedgerAdmin_Backup(Nullable<int> companyid, Nullable<int> fYearId, Nullable<int> ledgerId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace.LoadFromAssembly(typeof(AccountsBook_LedgerWise_DateRange_AllLedgerAdmin_Backup_Result).Assembly);
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var fYearIdParameter = fYearId.HasValue ?
                new ObjectParameter("fYearId", fYearId) :
                new ObjectParameter("fYearId", typeof(int));
    
            var ledgerIdParameter = ledgerId.HasValue ?
                new ObjectParameter("LedgerId", ledgerId) :
                new ObjectParameter("LedgerId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccountsBook_LedgerWise_DateRange_AllLedgerAdmin_Backup_Result>("AccountsBook_LedgerWise_DateRange_AllLedgerAdmin_Backup", companyidParameter, fYearIdParameter, ledgerIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<AccountsBook_LedgerWise_DateRange_AllLedgerAdmin_Test_Result> AccountsBook_LedgerWise_DateRange_AllLedgerAdmin_Test(Nullable<int> companyid, Nullable<int> fYearId, Nullable<int> ledgerId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace.LoadFromAssembly(typeof(AccountsBook_LedgerWise_DateRange_AllLedgerAdmin_Test_Result).Assembly);
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var fYearIdParameter = fYearId.HasValue ?
                new ObjectParameter("fYearId", fYearId) :
                new ObjectParameter("fYearId", typeof(int));
    
            var ledgerIdParameter = ledgerId.HasValue ?
                new ObjectParameter("LedgerId", ledgerId) :
                new ObjectParameter("LedgerId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccountsBook_LedgerWise_DateRange_AllLedgerAdmin_Test_Result>("AccountsBook_LedgerWise_DateRange_AllLedgerAdmin_Test", companyidParameter, fYearIdParameter, ledgerIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<PurchaseProduct_Result> PurchaseProduct(Nullable<int> productId, Nullable<System.DateTime> from, Nullable<System.DateTime> to, Nullable<int> compId, Nullable<long> branchId)
        {
            ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace.LoadFromAssembly(typeof(PurchaseProduct_Result).Assembly);
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PurchaseProduct_Result>("PurchaseProduct", productIdParameter, fromParameter, toParameter, compIdParameter, branchIdParameter);
        }
    
        public virtual ObjectResult<SalesProduct_Result> SalesProduct(Nullable<int> productId, Nullable<System.DateTime> from, Nullable<System.DateTime> to, Nullable<int> compId, Nullable<long> branchId)
        {
            ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace.LoadFromAssembly(typeof(SalesProduct_Result).Assembly);
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SalesProduct_Result>("SalesProduct", productIdParameter, fromParameter, toParameter, compIdParameter, branchIdParameter);
        }
    
        public virtual ObjectResult<AccountsBook_LedgerWise_DateRange_AllLedgerAdmin_Result> AccountsBook_LedgerWise_DateRange_AllLedgerAdmin(Nullable<int> companyid, Nullable<int> fYearId, Nullable<int> ledgerId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace.LoadFromAssembly(typeof(AccountsBook_LedgerWise_DateRange_AllLedgerAdmin_Result).Assembly);
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var fYearIdParameter = fYearId.HasValue ?
                new ObjectParameter("fYearId", fYearId) :
                new ObjectParameter("fYearId", typeof(int));
    
            var ledgerIdParameter = ledgerId.HasValue ?
                new ObjectParameter("LedgerId", ledgerId) :
                new ObjectParameter("LedgerId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccountsBook_LedgerWise_DateRange_AllLedgerAdmin_Result>("AccountsBook_LedgerWise_DateRange_AllLedgerAdmin", companyidParameter, fYearIdParameter, ledgerIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<AccountsBook_LedgerWise_DateRange_AllLedgerAdmin_Report_Result> AccountsBook_LedgerWise_DateRange_AllLedgerAdmin_Report(Nullable<int> companyid, Nullable<int> fYearId, Nullable<int> ledgerId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace.LoadFromAssembly(typeof(AccountsBook_LedgerWise_DateRange_AllLedgerAdmin_Report_Result).Assembly);
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var fYearIdParameter = fYearId.HasValue ?
                new ObjectParameter("fYearId", fYearId) :
                new ObjectParameter("fYearId", typeof(int));
    
            var ledgerIdParameter = ledgerId.HasValue ?
                new ObjectParameter("LedgerId", ledgerId) :
                new ObjectParameter("LedgerId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccountsBook_LedgerWise_DateRange_AllLedgerAdmin_Report_Result>("AccountsBook_LedgerWise_DateRange_AllLedgerAdmin_Report", companyidParameter, fYearIdParameter, ledgerIdParameter, fromDateParameter, toDateParameter);
        }
    }
}
