@model XenERP.Models.ModelView.FeedReceivedFromFarmModelView

@using XenERP.Models

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}



<script src="../../js/plugins/datetimepicker/bootstrap-datepicker.js" type="text/javascript"></script>
<link href="~/css/datetimepicker/datepicker.css" rel="stylesheet" />


<style>
.table-responsive {
    min-height: 0.01%;
    overflow-x: auto;
}
</style>
<script src="~/Scripts/JqueryValidation.js" type="text/javascript"></script>


<script language="javascript" type="text/javascript">


    $(document).on('click', '.add-component-deletebotton', function () {

        var id = $(this).closest('td').parent()[0].sectionRowIndex;

        document.getElementById("dataTable").deleteRow(id);
    });


    function addRow(tableID) {
        var rowadd = parseInt($("#IdToHold").val());
        alert(rowadd);
        rowadd++;
        var table = document.getElementById(tableID);
        var rowCount = table.rows.length;
        var row = table.insertRow(rowCount);


        //------------Code By Ayan--------------------
        //-----Change------

        var elementH = document.createElement("input");
        elementH.type = "hidden";
        elementH.name = "IdToHoldInEdit" + rowadd;
        elementH.id = "IdToHoldInEdit" + rowadd;
        elementH.value = rowadd;
        elementH.className = "IdToHoldInEdit";

        //---------------------------



        var cell0 = row.insertCell(0);
        var element0 = document.createElement("select");
        element0.className = "CategoryName";
        element0.id = "Category" + rowadd;
        element0.name = "CategoryName" + rowadd;
        var option0 = document.createElement("option");
        option0.innerHTML = "Select";
        option0.value = "";
        element0.add(option0, null);
        cell0.appendChild(element0);
        cell0.appendChild(elementH);

        $.get('/FeedReceived/GetCategoryType', null, function (data) {

            $.each(data, function () {
                $("#Category" + rowadd).append($("<option />").val(this.Id).text(this.Name));
            });

        });



        var cell1 = row.insertCell(1);
        var element1 = document.createElement("select");
        element1.className = "FeedName";
        element1.id = "Feed" + rowadd;
        element1.name = "FeedName" + rowadd;
        var option1 = document.createElement("option");
        option1.innerHTML = "Select";
        option1.value = "";
        element1.add(option1, null);
        cell1.appendChild(element1);

        var cell2 = row.insertCell(2);
        var element2 = document.createElement("input");
        element2.type = "text";
        element2.name = "FeedDesc" + rowadd;
        element2.id = "FeedDesc" + rowadd;
        element2.className = "FeedDesc";
        //element2.readOnly = true;
        cell2.appendChild(element2);

        var cell3 = row.insertCell(3);
        var element3 = document.createElement("input");
        element3.type = "text";
        element3.name = "FeedQuantity" + rowadd;
        element3.className = "FeedQuantity";
        element3.id = "FeedQuantity" + rowadd;
        cell3.appendChild(element3);


        var cell4 = row.insertCell(4);
        var element4 = document.createElement("select");
        element4.className = "UOMName";
        element4.id = "UOM" + rowadd;
        element4.name = "UOM" + rowadd;
        var option2 = document.createElement("option");
        option2.innerHTML = "select";
        option2.value = "";
        element4.add(option2, null);
        cell4.appendChild(element4);



        var cell5 = row.insertCell(5);
        var element5 = document.createElement("input");
        element5.type = "text";
        element5.name = "PrimaryUnit" + rowadd;
        element5.className = "PrimaryUnit";
        element5.id = "PrimaryUnit" + rowadd;
        element5.readOnly = true;
        cell5.appendChild(element5);



        var cell6 = row.insertCell(6);
        var element6 = document.createElement("input");
        element6.type = "text";
        element6.name = "TotalQuantity" + rowadd;
        element6.className = "TotalQuantity";
        element6.id = "TotalQuantity" + rowadd;
        element6.readOnly = true;
        cell6.appendChild(element6);




        var cell7 = row.insertCell(7);
        var element7 = document.createElement("input");
        element7.type = "hidden";
        element7.name = "PriceRate" + rowadd;
        element7.className = "PriceRate";
        element7.id = "PriceRate" + rowadd;
        element7.readOnly = true;


        var element7H = document.createElement("input");
        element7H.type = "hidden";
        element7H.name = "PuchaseChallanDetailsId" + rowadd;
        element7H.id = "PuchaseChallanDetailsId" + rowadd;
        element7H.className = "PuchaseChallanDetailsId";

        var element7HH = document.createElement("input");
        element7HH.type = "hidden";
        element7HH.name = "PurchaseChallanId" + rowadd;
        element7HH.id = "PurchaseChallanId" + rowadd;
        element7HH.className = "PurchaseChallanId";

        var element7HHH = document.createElement("input");
        element7HHH.type = "hidden";
        element7HHH.name = "PurchaseChallanNo" + rowadd;
        element7HHH.id = "PurchaseChallanNo" + rowadd;
        element7HHH.className = "PurchaseChallanNo";



        cell7.appendChild(element7H);
        cell7.appendChild(element7HH);
        cell7.appendChild(element7HHH);

        cell7.appendChild(element7);



        var cell8 = row.insertCell(8);
        var element8 = document.createElement("input");
        element8.type = "button";
        element8.id = "btndelete";
        element8.name = "button[]";
        element8.title = "Delete this row";
        element8.className = "add-component-deletebotton";
        cell8.appendChild(element8);


    };

</script>

<script language="javascript" type="text/javascript">

    $(document).ready(function () {



        $("form").on("submit", function (event) {

            var isValid = $(this).valid();

            if (isValid) {

                //var result = checkproductcount();

                //if (result == false) {
                //    $('#errordiv').css("display", "block");
                //    $('#errordiv').append('You must add atleast one line item');
                //    return false;
                //}
                $("#loading").fadeIn();
                var opts = {
                    lines: 12, // The number of lines to draw
                    length: 7, // The length of each line
                    width: 4, // The line thickness
                    radius: 10, // The radius of the inner circle
                    color: '#000', // #rgb or #rrggbb
                    speed: 2.0, // Rounds per second
                    trail: 60, // Afterglow percentage
                    shadow: false, // Whether to render a shadow
                    hwaccel: false // Whether to use hardware acceleration
                };
                var target = document.getElementById('loading');
                var spinner = new Spinner(opts).spin(target);
            }

            else {

                //                $("#btnsave").show();
            }


        });



        $("#dataTable").on('change', '.CategoryName', function () {

            var ctd = $(this).closest('td');
            var ctr = ctd.closest('tr');
            var nmn = ctr.find('.IdToHoldInEdit');
            var ppp = nmn.val();
            var rowadd = parseInt(ppp);
            var v = $("#Category" + rowadd).val();
            var p = v.toString();
            $.get('/FeedReceived/GetFeedTypeWithCatId', { CatId: p }, function (data) {
                $("#Feed" + rowadd).empty();
                $("#Feed" + rowadd).append($("<option />").val(-1).text("--Select--"));
                $.each(data, function () {
                    $("#Feed" + rowadd).append($("<option />").val(this.Id).text(this.Name));
                });

            });
        });


        $("#dataTable").on('change', '.FeedName', function () {

            var ctd = $(this).closest('td');
            var ctr = ctd.closest('tr');
            var nmn = ctr.find('.IdToHoldInEdit');
            var ppp = nmn.val();
            var rowadd = parseInt(ppp);

            var v = $("#Feed" + rowadd).val();
            var p = v.toString();

            $.get('/FeedReceived/GetUnitTypeWithProductId', { CatId: p }, function (data) {
                $("#UOM" + rowadd).empty();

                $("#FeedQuantity" + rowadd).val(0);
                $("#PrimaryUnit" + rowadd).val(0);
                $("#TotalQuantity" + rowadd).val(0);

                $("#UOM" + rowadd).append($("<option />").val(-1).text("--Select--"));
                $.each(data, function () {

                    $("#UOM" + rowadd).append($("<option />").val(this.UnitId).text(this.UnitName));
                    $("#UOM" + rowadd).append($("<option />").val(this.UnitIdSecondary).text(this.UnitNameSecondary));
                });

            });
        });



    });

</script>


<script language="javascript" type="text/javascript">

    $(document).ready(function () {
        $("#dp3").datepicker({ autoclose: true, todayHighlight: true });

        $("#dataTable").on('change', '.UOMName', function () {
            var UM = $(this).val();
            var ctd = $(this).closest('td');
            var ctr = ctd.closest('tr');
            $.getJSON('/FeedReceived/GetUnitFormula', { data: UM }, function (data) {
                ctr.find(".PrimaryUnit").val(data.Formula);
                var vgh = parseInt(ctr.find(".FeedQuantity").val()) || 0;
                var hhh = parseInt(data.Formula) || 0;


                ctr.find(".TotalQuantity").val(hhh * vgh);
                $(".FeedQuantity").on('keyup', function () {
                    var vgg = parseInt(ctr.find(".FeedQuantity").val()) || 0;

                    ctr.find(".TotalQuantity").val(hhh * vgg);


                })
            });
        });


        $("#dataTable").on('keyup', '.FeedQuantity', function () {
            var UM = $(this).val();
            var ctd = $(this).closest('td');
            var ctr = ctd.closest('tr');
            var hhh = parseInt(ctr.find(".PrimaryUnit").val()) || 0;
            var vgg = (parseFloat(ctr.find(".FeedQuantity").val())).toFixed(2) || 0;
            ctr.find(".TotalQuantity").val(hhh * vgg).ToFixed(2);

        });

    });

</script>


@using (Html.BeginForm("EditFeedReceived", "FeedReceivedInFirm"))
{

    <aside class="right-side">

        <section class="content-header">
            <h1>Feed Received<small>Edit</small> </h1>
            <ol class="breadcrumb">
                <li><a href="#"><i class="fa fa-dashboard"></i>Home</a></li>
                <li><a href="#">Forms</a></li>
                <li class="active"> Farm Edit</li>
            </ol>
        </section>

        <div class="nav-tabs-custom">
            <ul class="nav nav-tabs">
                <li class="pull-right"><input name="" type="submit" value="Submit" class="btn btn-primary"> </li>

            </ul>
        </div>

        <!-- Main content -->
        @*<section class="content">
            <div class="row">
                <div class="col-md-6">
                    <div class="box box-primary">
                        <div class="box-header">
                        </div>
                        <div class="box-body">*@

        @if (ViewBag.Message != null)
        {
            <div class="alert alert-success alert-dismissable">
                <i class="fa fa-check"></i>
                <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
                @ViewBag.Message
            </div>
        }

        @if (ViewBag.Error != null)
        {
            <div class="alert alert-danger alert-dismissable">
                <i class="fa fa-ban"></i>
                <button class="close" aria-hidden="true" data-dismiss="alert" type="button"></button>
                <b>Error!</b>
                @ViewBag.Error
            </div>
        }



       

            
         @Html.HiddenFor(d => Model.Id)
          @Html.Hidden("BranchId", (long)ViewBag.BranchId)
          @Html.Hidden("CompanyId", (long)ViewBag.CompanyId)
           @Html.Hidden("UserId", (long)ViewBag.UserId)
           @Html.HiddenFor(d=>d.CreatedBy)
          @Html.HiddenFor(d => d.CreatedOn)
     
            <div id="loading">
                <div id="loadingcontent">
                    <p id="loadingspinner">
                        Loading...
                    </p>
                </div>
            </div>



        <div class="col-md-12">

       <div class="col-md-6">
            <div class="box box-primary">
                <div class="box-header">  </div>
                <div class="box-body">
                    
                 

                        <div class="form-group">
                            <label class="black_txt_010"> Unit Code:<span style="color:Red;">*</span> </label>
                            @Html.TextBoxFor(model => Model.UnitCode, new { @class = "form-control", @placeholder = "Enter Farm Name", @maxlength = "100", @readonly = "readonly", @Name = "UnitCode" })
                            @Html.HiddenFor(model => Model.UnitId, new { @Name = "UnitId" })
                        </div>
                    <div class="form-group">
                        <label class="black_txt_010"> Farmer Name:<span style="color:Red;">*</span> </label>
                        @Html.TextBoxFor(model => Model.FarmerName, new { @class = "form-control", @placeholder = "Enter Farm Name", @maxlength = "100", @readonly = "readonly", @Name = "FarmerName" })
                        @Html.HiddenFor(model => Model.FarmId, new { @Name = "FarmId" })
                    </div>

                    @*<div class="form-group">
                        <label class="black_txt_010"> Flock Code :<span style="color:Red;">*</span> </label>
                        @Html.DropDownListFor(model => Model.FlockId, new SelectList(ViewBag.FlockCode, "Id", "Name"), new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => Model.FlockId)

                    </div>*@   

                    <div class="form-group">
                        <label class="black_txt_010"> Flock Code :<span style="color:Red;">*</span> </label>
                        @Html.TextBoxFor(model => Model.FlockCode, new { @class = "form-control" ,@readonly ="readonly"})
                        @Html.HiddenFor(model => Model.FlockId)
                        @Html.HiddenFor(model => Model.FlockIdOriginal)
                        @Html.HiddenFor(model => Model.FeedIssueMasterId)

                    </div>   



                    @*<div class="form-group">
                        <label class="black_txt_010"> Flock Code:<span style="color:Red;">*</span> </label>
                        @Html.DropDownListFor(model => item.FlockId, new { @class = "form-control", @placeholder = "Enter Farm Name", @maxlength = "100", @readonly = "readonly", @Name = "UnitCode" })
                        @Html.HiddenFor(model => item.UnitId, new { @Name = "UnitId" })
                    </div>*@
                        @*<div class="form-group">
                        <label class="black_txt_010"> Deliveryman Code :<span style="color:Red;"></span> </label>
                        @Html.TextBoxFor(model => item.DeliveryManCode, new { @class = "form-control", @placeholder = "Enter Farmer Address", @maxlength = "100", @Name = "DeliveryManCode" })
                        @Html.ValidationMessageFor(model => item.DeliveryManCode)
                    </div>*@
                                   
                  

                      

                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="box box-primary">
                <div class="box-header">  </div>
                <div class="box-body">

                    <div class="form-group">
                        <label class="black_txt_010"> Linesupervisor Name:<span style="color:Red;"></span> </label>
                        @Html.TextBoxFor(model => Model.DeliveryManName, new { @class = "form-control", @placeholder = "Enter Farmer Address", @maxlength = "100", @Name = "DeliveryManName" })
                        @Html.HiddenFor(model => Model.DeliveryManId, new { @Name = "DeliveryManId" })
                        @Html.ValidationMessageFor(model => Model.DeliveryManName)
                    </div>

                   <div class="form-group">
                        <label class="black_txt_010"> Date Of Receipt:<span style="color:Red;">*</span> </label>
                         <div class="input-group date" id="dp3" data-date-format="@Session["DateFormatLower"]">@Html.TextBoxFor(model => Model.DateOfReceiptString, new { @class = "form-control", @Name = "DateOfReceiptString", @readonly = "" })  <span class="input-group-addon" style=" width:auto !important"><i class="glyphicon glyphicon-calendar"></i></span> </div>                       
                        @Html.ValidationMessageFor(model => Model.DateOfReceiptString)
                         @Html.HiddenFor(model => Model.DateOfReceipt, new { @Name = "DateOfReceipt" })
                    </div>

                     <div class="form-group">
                        <label class="black_txt_010"> Challan No:<span style="color:Red;"></span> </label>
                        @Html.TextBoxFor(model => Model.ChallanNo, new { @class = "form-control", @placeholder = "Enter Farmer Address", @maxlength = "100", @Name = "ChallanNo" })
                        @Html.ValidationMessageFor(model => Model.ChallanNo)
                    </div>
                   
                </div>
            </div>
        </div>

        </div>
      
          <div class="col-md-12">

        <div class="form-group">
                          <h3>Feed Details</h3>
                          </div>
                         <div class="form-group">
                         <div class="table-responsive">
                          <table class="my-table-style table" id="dataTable">
                          <tr class="my-table-header">

                          <td class="my-table-header" style="text-align:center;">
                          <label class="black_txt_010">Feed/Medicine Category</label>
                          </td>


                          <td class="my-table-header" style="text-align:center;">
                          <label class="black_txt_010">Feed/Medicine Name</label>
                          </td>

                           <td class="my-table-header" style="text-align:center;">
                          <label class="black_txt_010">Description</label>
                          </td>

                           <td  style="text-align:center;">
                          <label class="black_txt_010">Feed Quantity</label>
                          </td>

                           <td  style="text-align:center;">
                          <label class="black_txt_010">Unit Type</label>
                          </td>


                          <td style="text-align:center;">
                          <label class="black_txt_010">Unit Of</label>
                          </td>


                           <td style="text-align:center;">
                          <label class="black_txt_010">Total Quantity</label>
                          </td>


                          <td style="text-align:center;">
                          <label class="black_txt_010">Price Rate</label>
                          </td>



                          <td style="text-align: center;">
                          <label class="black_txt_010">Action</label>
                           </td>

                           </tr>

                           @{ int H = 0;                              
                               
                            }

                           @for (int i = 0; i < Model.feedreceivedfromfirmDetails.Count(); i++)
                           {

                               H = H + i;
                         
                        
                            <tr >

                             <td  style="text-align:center;">
                               @Html.Hidden("IdToHoldInEdit", i, new { @Name = "IdToHoldInEdit" + i, @class = "IdToHoldInEdit" })

                           @Html.DropDownListFor(model => Model.feedreceivedfromfirmDetails[i].CategoryId, new SelectList(ViewBag.CategoryName, "Id", "Name", Model.feedreceivedfromfirmDetails[i].CategoryId), new { @class = "form-control CategoryName", @placeholder = "Enter Farm Unit Name", @maxlength = "100", @id = "Category" + i, @Name = "CategoryName" + i })
                        
                          </td>

                          @{
                               InventoryEntities db = new InventoryEntities();

                               var kl = Convert.ToInt32(Model.feedreceivedfromfirmDetails[i].CategoryId);
                               var v = db.Products.Where(g => g.CategoryId == kl).ToList();
                             
            
                           }

                           <td  style="text-align:center;">
                           @Html.DropDownListFor(model => Model.feedreceivedfromfirmDetails[i].ProductId, new SelectList(v, "Id", "Name", Model.feedreceivedfromfirmDetails[i].ProductId), new { @class = "form-control FeedName", @placeholder = "Enter Farm Unit Name", @maxlength = "100", @id = "Feed" + i, @Name = "FeedName" + i })
                        
                          </td>

                           <td style="text-align:center;">
                          @Html.TextBoxFor(model => Model.feedreceivedfromfirmDetails[i].Description, new { @class = "form-control FeedDesc", @id = "FeedDesc" + i, @Name = "FeedDesc" + i })
                          </td>

                           <td  style="text-align:center;">
                           @Html.TextBoxFor(model => Model.feedreceivedfromfirmDetails[i].Quantity, new { @class = "form-control FeedQuantity", @id = "FeedQuantity" + i, @Name = "FeedQuantity" + i })
                          </td>

                           @{
                              

                               var klu = Convert.ToInt32(Model.feedreceivedfromfirmDetails[i].ProductId);
                               var ppp = db.Products.Where(pk => pk.Id == klu).FirstOrDefault();


                               List<long> jjj = new List<long>();
                               jjj.Add(Convert.ToInt32(ppp.UnitId));
                               jjj.Add(Convert.ToInt32(ppp.UnitIdSecondary));

                               var klj = db.UOMs.Where(ml => jjj.Contains(ml.Id)).ToList();
                               
            
                           }



                           <td  style="text-align:center;">
                          @Html.DropDownListFor(model => Model.feedreceivedfromfirmDetails[i].UOMId, new SelectList(klj, "Id", "Description", Model.feedreceivedfromfirmDetails[i].UOMId), new { @class = "form-control UOMName", @placeholder = "Enter Farm Unit Name", @maxlength = "100", @id = "UOM" + i, @Name = "UOM" + i })
                          </td>


                          <td style="text-align:center;">
                           @Html.TextBoxFor(model => Model.feedreceivedfromfirmDetails[i].UnitFormula, new { @class = "form-control PrimaryUnit", @id = "PrimaryUnit" + i, @Name = "PrimaryUnit" + i })
                          </td>

                          <td style="text-align:center;">
                          @{
                               var k = Model.feedreceivedfromfirmDetails[i].UnitFormula * Model.feedreceivedfromfirmDetails[i].Quantity;                             
                            }

                         @Html.TextBox("TotalQuantity", k, new { @class = "form-control TotalQuantity", @readonly = "readonly", @id = "TotalQuantity" + i, @Name = "TotalQuantity" + i })
                          </td>

                            <td style="text-align:center;">
                           @Html.HiddenFor(model => Model.feedreceivedfromfirmDetails[i].PriceRate, new { @class = "form-control PriceRate", @id = "PriceRate" + i, @Name = "PriceRate" + i, @readonly = "readonly" })
                           @Html.HiddenFor(model => Model.feedreceivedfromfirmDetails[i].UnitPrice, new { @class = "form-control UnitPrice", @id = "UnitPrice" + i, @Name = "UnitPrice" + i, @readonly = "readonly" })
                                @Html.HiddenFor(model => Model.feedreceivedfromfirmDetails[i].PurchaseChallanId, new { @class = "form-control PurchaseChallanId", @id = "PurchaseChallanId" + i, @Name = "PurchaseChallanId" + i })
                                @Html.HiddenFor(model => Model.feedreceivedfromfirmDetails[i].PurchaseChallanNo, new { @class = "form-control PurchaseChallanNo", @id = "PurchaseChallanNo" + i, @Name = "PurchaseChallanNo" + i })
                                @Html.HiddenFor(model => Model.feedreceivedfromfirmDetails[i].PurchaseChallanDetailsId, new { @class = "form-control PurchaseChallanDetailsId", @id = "PurchaseChallanDetailsId" + i, @Name = "PurchaseChallanDetailsId" + i })
                          </td>


                          <td style="text-align: center;">
                         <input type="button" id="btndelete" name="button[]" title = "Delete this row" class="add-component-deletebotton"/>


                           </td>
                             
                             </tr>
                           }
                        
                           </table>
                          

                              @Html.Hidden("IdToHold", H)
                           </div>
                            <input type="button" class="add-component-botton" id="btnAdd" onclick="addRow('dataTable')" />
                           </div>

                          

</div>

        


    </aside>

}
